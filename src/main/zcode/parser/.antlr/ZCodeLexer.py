# Generated from e:/PPL/assignment1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#2113376


def serializedATN():
    return [
        4,0,49,391,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,3,39,
        259,8,39,1,39,1,39,1,40,1,40,1,40,5,40,266,8,40,10,40,12,40,269,
        9,40,1,40,1,40,3,40,273,8,40,1,40,1,40,1,41,1,41,3,41,279,8,41,1,
        41,3,41,282,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,
        42,293,8,42,1,43,1,43,1,43,5,43,298,8,43,10,43,12,43,301,9,43,1,
        43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,310,8,44,10,44,12,44,313,9,
        44,1,44,3,44,316,8,44,1,44,1,44,3,44,320,8,44,1,44,1,44,1,45,1,45,
        5,45,326,8,45,10,45,12,45,329,9,45,1,46,4,46,332,8,46,11,46,12,46,
        333,1,46,1,46,1,47,1,47,1,47,5,47,341,8,47,10,47,12,47,344,9,47,
        1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,4,49,354,8,49,11,49,12,49,
        355,1,50,1,50,5,50,360,8,50,10,50,12,50,363,9,50,1,51,1,51,3,51,
        367,8,51,1,51,4,51,370,8,51,11,51,12,51,371,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        390,8,52,1,311,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,93,47,95,48,97,49,99,0,101,0,103,0,105,0,1,0,8,
        4,0,10,10,13,13,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,3,0,8,9,12,12,32,32,7,0,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,
        45,413,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
        0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,107,1,0,
        0,0,3,114,1,0,0,0,5,119,1,0,0,0,7,126,1,0,0,0,9,130,1,0,0,0,11,138,
        1,0,0,0,13,145,1,0,0,0,15,150,1,0,0,0,17,154,1,0,0,0,19,160,1,0,
        0,0,21,163,1,0,0,0,23,169,1,0,0,0,25,178,1,0,0,0,27,181,1,0,0,0,
        29,186,1,0,0,0,31,191,1,0,0,0,33,197,1,0,0,0,35,201,1,0,0,0,37,203,
        1,0,0,0,39,205,1,0,0,0,41,207,1,0,0,0,43,209,1,0,0,0,45,211,1,0,
        0,0,47,213,1,0,0,0,49,216,1,0,0,0,51,219,1,0,0,0,53,221,1,0,0,0,
        55,224,1,0,0,0,57,226,1,0,0,0,59,229,1,0,0,0,61,233,1,0,0,0,63,236,
        1,0,0,0,65,240,1,0,0,0,67,244,1,0,0,0,69,247,1,0,0,0,71,249,1,0,
        0,0,73,251,1,0,0,0,75,253,1,0,0,0,77,255,1,0,0,0,79,258,1,0,0,0,
        81,262,1,0,0,0,83,276,1,0,0,0,85,292,1,0,0,0,87,294,1,0,0,0,89,305,
        1,0,0,0,91,323,1,0,0,0,93,331,1,0,0,0,95,337,1,0,0,0,97,349,1,0,
        0,0,99,353,1,0,0,0,101,357,1,0,0,0,103,364,1,0,0,0,105,389,1,0,0,
        0,107,108,5,110,0,0,108,109,5,117,0,0,109,110,5,109,0,0,110,111,
        5,98,0,0,111,112,5,101,0,0,112,113,5,114,0,0,113,2,1,0,0,0,114,115,
        5,98,0,0,115,116,5,111,0,0,116,117,5,111,0,0,117,118,5,108,0,0,118,
        4,1,0,0,0,119,120,5,115,0,0,120,121,5,116,0,0,121,122,5,114,0,0,
        122,123,5,105,0,0,123,124,5,110,0,0,124,125,5,103,0,0,125,6,1,0,
        0,0,126,127,5,118,0,0,127,128,5,97,0,0,128,129,5,114,0,0,129,8,1,
        0,0,0,130,131,5,100,0,0,131,132,5,121,0,0,132,133,5,110,0,0,133,
        134,5,97,0,0,134,135,5,109,0,0,135,136,5,105,0,0,136,137,5,99,0,
        0,137,10,1,0,0,0,138,139,5,114,0,0,139,140,5,101,0,0,140,141,5,116,
        0,0,141,142,5,117,0,0,142,143,5,114,0,0,143,144,5,110,0,0,144,12,
        1,0,0,0,145,146,5,102,0,0,146,147,5,117,0,0,147,148,5,110,0,0,148,
        149,5,99,0,0,149,14,1,0,0,0,150,151,5,102,0,0,151,152,5,111,0,0,
        152,153,5,114,0,0,153,16,1,0,0,0,154,155,5,117,0,0,155,156,5,110,
        0,0,156,157,5,116,0,0,157,158,5,105,0,0,158,159,5,108,0,0,159,18,
        1,0,0,0,160,161,5,98,0,0,161,162,5,121,0,0,162,20,1,0,0,0,163,164,
        5,98,0,0,164,165,5,114,0,0,165,166,5,101,0,0,166,167,5,97,0,0,167,
        168,5,107,0,0,168,22,1,0,0,0,169,170,5,99,0,0,170,171,5,111,0,0,
        171,172,5,110,0,0,172,173,5,116,0,0,173,174,5,105,0,0,174,175,5,
        110,0,0,175,176,5,117,0,0,176,177,5,101,0,0,177,24,1,0,0,0,178,179,
        5,105,0,0,179,180,5,102,0,0,180,26,1,0,0,0,181,182,5,101,0,0,182,
        183,5,108,0,0,183,184,5,115,0,0,184,185,5,101,0,0,185,28,1,0,0,0,
        186,187,5,101,0,0,187,188,5,108,0,0,188,189,5,105,0,0,189,190,5,
        102,0,0,190,30,1,0,0,0,191,192,5,98,0,0,192,193,5,101,0,0,193,194,
        5,103,0,0,194,195,5,105,0,0,195,196,5,110,0,0,196,32,1,0,0,0,197,
        198,5,101,0,0,198,199,5,110,0,0,199,200,5,100,0,0,200,34,1,0,0,0,
        201,202,5,43,0,0,202,36,1,0,0,0,203,204,5,45,0,0,204,38,1,0,0,0,
        205,206,5,42,0,0,206,40,1,0,0,0,207,208,5,47,0,0,208,42,1,0,0,0,
        209,210,5,37,0,0,210,44,1,0,0,0,211,212,5,61,0,0,212,46,1,0,0,0,
        213,214,5,33,0,0,214,215,5,61,0,0,215,48,1,0,0,0,216,217,5,60,0,
        0,217,218,5,45,0,0,218,50,1,0,0,0,219,220,5,60,0,0,220,52,1,0,0,
        0,221,222,5,60,0,0,222,223,5,61,0,0,223,54,1,0,0,0,224,225,5,62,
        0,0,225,56,1,0,0,0,226,227,5,62,0,0,227,228,5,61,0,0,228,58,1,0,
        0,0,229,230,5,46,0,0,230,231,5,46,0,0,231,232,5,46,0,0,232,60,1,
        0,0,0,233,234,5,61,0,0,234,235,5,61,0,0,235,62,1,0,0,0,236,237,5,
        110,0,0,237,238,5,111,0,0,238,239,5,116,0,0,239,64,1,0,0,0,240,241,
        5,97,0,0,241,242,5,110,0,0,242,243,5,100,0,0,243,66,1,0,0,0,244,
        245,5,111,0,0,245,246,5,114,0,0,246,68,1,0,0,0,247,248,5,40,0,0,
        248,70,1,0,0,0,249,250,5,41,0,0,250,72,1,0,0,0,251,252,5,91,0,0,
        252,74,1,0,0,0,253,254,5,93,0,0,254,76,1,0,0,0,255,256,5,44,0,0,
        256,78,1,0,0,0,257,259,5,13,0,0,258,257,1,0,0,0,258,259,1,0,0,0,
        259,260,1,0,0,0,260,261,5,10,0,0,261,80,1,0,0,0,262,267,5,34,0,0,
        263,266,3,105,52,0,264,266,8,0,0,0,265,263,1,0,0,0,265,264,1,0,0,
        0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,272,1,0,0,
        0,269,267,1,0,0,0,270,271,5,39,0,0,271,273,5,34,0,0,272,270,1,0,
        0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,6,40,0,0,275,82,1,0,
        0,0,276,278,3,99,49,0,277,279,3,101,50,0,278,277,1,0,0,0,278,279,
        1,0,0,0,279,281,1,0,0,0,280,282,3,103,51,0,281,280,1,0,0,0,281,282,
        1,0,0,0,282,84,1,0,0,0,283,284,5,116,0,0,284,285,5,114,0,0,285,286,
        5,117,0,0,286,293,5,101,0,0,287,288,5,102,0,0,288,289,5,97,0,0,289,
        290,5,108,0,0,290,291,5,115,0,0,291,293,5,101,0,0,292,283,1,0,0,
        0,292,287,1,0,0,0,293,86,1,0,0,0,294,299,5,34,0,0,295,298,3,105,
        52,0,296,298,8,0,0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,301,1,0,
        0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,
        0,0,302,303,5,34,0,0,303,304,6,43,1,0,304,88,1,0,0,0,305,306,5,35,
        0,0,306,307,5,35,0,0,307,311,1,0,0,0,308,310,9,0,0,0,309,308,1,0,
        0,0,310,313,1,0,0,0,311,312,1,0,0,0,311,309,1,0,0,0,312,319,1,0,
        0,0,313,311,1,0,0,0,314,316,5,13,0,0,315,314,1,0,0,0,315,316,1,0,
        0,0,316,317,1,0,0,0,317,320,5,10,0,0,318,320,5,0,0,1,319,315,1,0,
        0,0,319,318,1,0,0,0,320,321,1,0,0,0,321,322,6,44,2,0,322,90,1,0,
        0,0,323,327,7,1,0,0,324,326,7,2,0,0,325,324,1,0,0,0,326,329,1,0,
        0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,92,1,0,0,0,329,327,1,0,0,
        0,330,332,7,3,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,
        0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,6,46,2,0,336,94,1,0,0,
        0,337,342,5,34,0,0,338,341,3,105,52,0,339,341,8,0,0,0,340,338,1,
        0,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,
        0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,5,92,0,0,346,347,8,
        4,0,0,347,348,6,47,3,0,348,96,1,0,0,0,349,350,9,0,0,0,350,351,6,
        48,4,0,351,98,1,0,0,0,352,354,7,5,0,0,353,352,1,0,0,0,354,355,1,
        0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,100,1,0,0,0,357,361,5,
        46,0,0,358,360,7,5,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,
        0,0,0,361,362,1,0,0,0,362,102,1,0,0,0,363,361,1,0,0,0,364,366,7,
        6,0,0,365,367,7,7,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,369,1,
        0,0,0,368,370,7,5,0,0,369,368,1,0,0,0,370,371,1,0,0,0,371,369,1,
        0,0,0,371,372,1,0,0,0,372,104,1,0,0,0,373,374,5,92,0,0,374,390,5,
        98,0,0,375,376,5,92,0,0,376,390,5,102,0,0,377,378,5,92,0,0,378,390,
        5,114,0,0,379,380,5,92,0,0,380,390,5,110,0,0,381,382,5,92,0,0,382,
        390,5,116,0,0,383,384,5,92,0,0,384,390,5,39,0,0,385,386,5,92,0,0,
        386,390,5,92,0,0,387,388,5,39,0,0,388,390,5,34,0,0,389,373,1,0,0,
        0,389,375,1,0,0,0,389,377,1,0,0,0,389,379,1,0,0,0,389,381,1,0,0,
        0,389,383,1,0,0,0,389,385,1,0,0,0,389,387,1,0,0,0,390,106,1,0,0,
        0,22,0,258,265,267,272,278,281,292,297,299,311,315,319,327,333,340,
        342,355,361,366,371,389,5,1,40,0,1,43,1,6,0,0,1,47,2,1,48,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TYPE_NUMBER = 1
    TYPE_BOOL = 2
    TYPE_STRING = 3
    VAR = 4
    DYNAMIC = 5
    RETURN = 6
    FUNCTION = 7
    FOR = 8
    UNTIL = 9
    BY = 10
    BREAK = 11
    CONTINUE = 12
    IF = 13
    ELSE = 14
    ELIF = 15
    BEGIN = 16
    END = 17
    PLUS = 18
    MINUS = 19
    MULTIPLY = 20
    DIVIDE = 21
    MODULO = 22
    EQUAL = 23
    NOT_EQUAL = 24
    ASSIGNMENT = 25
    LESS_THAN = 26
    LESS_THAN_OR_EQUAL = 27
    GREATER_THAN = 28
    GREATER_THAN_OR_EQUAL = 29
    STRING_CONCATENATION = 30
    STRING_COMPARISION = 31
    NOT = 32
    AND = 33
    OR = 34
    LEFT_PARENTHESIS = 35
    RIGHT_PARENTHESIS = 36
    LEFT_SQUARE_BRACKET = 37
    RIGHT_SQUARE_BRACKET = 38
    COMMA = 39
    NEWLINE = 40
    UNCLOSE_STRING = 41
    NUMBER = 42
    BOOLEAN = 43
    STRING = 44
    COMMENT = 45
    IDENTIFIER = 46
    WS = 47
    ILLEGAL_ESCAPE = 48
    ERROR_TOKEN = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'var'", "'dynamic'", "'return'", 
            "'func'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'else'", "'elif'", "'begin'", "'end'", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'='", "'!='", "'<-'", "'<'", "'<='", "'>'", 
            "'>='", "'...'", "'=='", "'not'", "'and'", "'or'", "'('", "')'", 
            "'['", "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_NUMBER", "TYPE_BOOL", "TYPE_STRING", "VAR", "DYNAMIC", 
            "RETURN", "FUNCTION", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "PLUS", "MINUS", "MULTIPLY", 
            "DIVIDE", "MODULO", "EQUAL", "NOT_EQUAL", "ASSIGNMENT", "LESS_THAN", 
            "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
            "STRING_CONCATENATION", "STRING_COMPARISION", "NOT", "AND", 
            "OR", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", 
            "RIGHT_SQUARE_BRACKET", "COMMA", "NEWLINE", "UNCLOSE_STRING", 
            "NUMBER", "BOOLEAN", "STRING", "COMMENT", "IDENTIFIER", "WS", 
            "ILLEGAL_ESCAPE", "ERROR_TOKEN" ]

    ruleNames = [ "TYPE_NUMBER", "TYPE_BOOL", "TYPE_STRING", "VAR", "DYNAMIC", 
                  "RETURN", "FUNCTION", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
                  "IF", "ELSE", "ELIF", "BEGIN", "END", "PLUS", "MINUS", 
                  "MULTIPLY", "DIVIDE", "MODULO", "EQUAL", "NOT_EQUAL", 
                  "ASSIGNMENT", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
                  "GREATER_THAN_OR_EQUAL", "STRING_CONCATENATION", "STRING_COMPARISION", 
                  "NOT", "AND", "OR", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
                  "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "COMMA", 
                  "NEWLINE", "UNCLOSE_STRING", "NUMBER", "BOOLEAN", "STRING", 
                  "COMMENT", "IDENTIFIER", "WS", "ILLEGAL_ESCAPE", "ERROR_TOKEN", 
                  "INTEGER", "DECIMAL", "EXPONENT", "ESCAPE_SEQUENCE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[40] = self.UNCLOSE_STRING_action 
            actions[43] = self.STRING_action 
            actions[47] = self.ILLEGAL_ESCAPE_action 
            actions[48] = self.ERROR_TOKEN_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise UncloseString(self.text[1:])
     

    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text[1:-1]
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_TOKEN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


